[project]
    name = "qiskit_metal"
    description = "Qiskit Metal | for quantum device design & analysis"
    authors = [
        { name = "Qiskit Metal Development Team", email = "qiskit@us.ibm.com" },
    ]
    classifiers = [
        "Intended Audience :: Developers",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: Apache Software License",
        "Operating System :: MacOS",
        "Operating System :: Microsoft :: Windows",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Programming Language :: Python :: 3.13",
        "Topic :: Scientific/Engineering",
    ]
    keywords = [ "eda", "qiskit", "quantum", "sdk" ]
    license = "Apache-2.0"
    license-files = [ "LICENSE.txt" ]
    readme = { file = "README.md", content-type = "text/markdown" }
    requires-python = ">=3.10,<3.13"
    urls = { bugtracker = "https://github.com/Qiskit/qiskit-metal/issues", documentation = "https://qiskit-community.github.io/qiskit-metal/", source = "https://github.com/Qiskit/qiskit-metal" }
    version = "0.5.0"
    dependencies = [
        "addict>=2.4.0",
        "gdstk>=0.9",
        "geopandas>=0.12.2",
        "matplotlib>=3.7.0",
        "numpy>=1.24.2,<2",
        "pandas>=1.5.3",
        "pint~=0.20.1",
        "pyEPR-quantum>=0.9.0",
        "pygments>=2.14.0",
        "pyside6>=6.9.0",
        "qdarkstyle~=3.1",
        "qutip>=4.7.1",
        "scipy>=1.10.0",
        "shapely~=2.0.1",
        "scqubits>=3.1.0,<=3.4.0",
        "gmsh~=4.11.1",
        "pyaedt>=0.19",
        "pyyaml>=6.0",
        "cython<3.0.0",
        "descartes>=1.1.0",
    ]

[build-system]
    requires      = [ "uv_build>=0.8.4,<0.9.0" ]
    build-backend = "uv_build"

# Accounting for flat layout
[tool.uv.build-backend]
    module-name = "qiskit_metal"
    module-root = ""

[dependency-groups]
    docs = [
        "nbsphinx>=0.8.6",
        "numpydoc>=1.5.0",
        "qiskit-sphinx-theme>=1.16.0",
        "sphinx>=6.0.0",
        "sphinx-intl>=2.1.0",
    ]
    lint = [
        "pylint>=3.3.8",
        "yapf>=0.43.0",
    ]
    test = [ "pytest>=8.4.1", "pytest-rich>=0.2.0" ]


[tool.pytest.ini_options]
    minversion = "6.0"
    addopts    = "--rich --ignore=qiskit_metal/tests/test_renderers.py"
    testpaths  = [ "qiskit_metal/tests/" ]


[tool.tox]
    requires = [ "tox>=4", "tox-uv>=1.27" ]
    env_list = [ "py3.12", "py3.11", "py3.10", "lint", "docs" ]
    labels   = { test = [ "py3.12", "py3.11", "py3.10" ] }


[tool.tox.env_run_base]
    description       = "Run tests against the wheel using pytest"
    packages          = [ "wheel" ]
    set_env           = { VIRTUAL_ENV = "{envdir}", LANGUAGE = "en_US", QISKIT_METAL_HEADLESS = "1", LC_ALL = "en_US.utf-8" }
    dependency_groups = [ "test" ]
    commands          = [ [ "python", "-m", "pytest", { replace = "posargs", default = [ "" ], extend = true } ] ]


[tool.tox.env.lint]
    base_python = [ "py3.10" ]
    skip_install = true
    dependency_groups = [ "lint" ]
    commands = [
        [ "yapf", "--diff", "--recursive", "--style", "{toxinidir}/.style.yapf", "qiskit_metal" ],
        [ "pylint", "-rn", "--rcfile={toxinidir}/.pylintrc", "qiskit_metal" ],
    ]

[tool.tox.env.docs]
    description = "Build the documentation using sphinx"
    base_python = [ "py3.10" ]
    pass_env    = [ "DOCS_FROM_MASTER", "QISKIT_DOCS_BUILD_TUTORIALS" ]
    set_env     = { METAL_BUILD_DOCS = "True" }
    dependency_groups = [ "docs" ]
    commands = [
        [
            "sphinx-build",
            "-b",
            "html",
            "-j",
            "auto",
            "{toxinidir}/docs/",
            "{toxinidir}/docs/_build/html",
            { replace = "posargs", default = [ "" ], extend = true },
        ],
    ]


[tool.tox.env.gettext]
    description = "Build the documentation using sphinx"
    base_python = [ "py3.9" ]
    set_env     = { METAL_BUILD_DOCS = "True" }
    dependency_groups = [ "docs" ]
    commands = [
        [
            "sphinx-build",
            "-b",
            "gettext",
            "-j",
            "auto",
            "{toxinidir}/docs/",
            "{toxinidir}/docs/_build/gettext",
            { replace = "posargs", default = [ "" ], extend = true },
        ],
        [
            "sphinx-intl",
            "-c",
            "{toxinidir}/docs/conf.py",
            "update",
            "-p",
            "{toxinidir}/docs/_build/gettext",
            "-l",
            "en",
            "-d",
            "{toxinidir}/docs/locale",
        ],
    ]

[tool.tox.env.docs-clean]
    description = "Clean the documentation build"
    skip_install = true
    allowlist_externals = [ "rm" ]
    commands = [
        [ "rm", "-rf", "{toxinidir}/docs/stubs/", "{toxinidir}/docs/_build/" ],
    ]
